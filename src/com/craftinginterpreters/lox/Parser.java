package com.craftinginterpreters.lox;

import java.util.List;
import static com.craftinginterpreters.lox.TokenType.*;

/**
 * Class to take a list of tokens from the scanned input and put these together
 * into a structure we can use to parse into a sequence of interpretable code
 * elements
 */
public class Parser
{
    // Sentinel class used to help synchronise the parser when we hit an
    // error condition
    private static class ParseError extends RuntimeException {}

    // The list of tokens we need to parse
    private final List<Token> tokens;

    // The index of the token we're currently parsing
    private int current = 0;

    /**
     * Constructor for the Parser class.  Simply stores the list of tokens
     * for later parsing.
     * @param tokens The list of tokens we wish to parse
     */
    Parser(List<Token> tokens)
    {
        this.tokens = tokens;
    }

    /**
     * Main method to start the parser once it has been instantiated.
     * @return The parsed syntax tree.
     */
    Expr parse()
    {
        try {
            return expression();
        }
        catch (ParseError error) {
            return null;
        }
    }

    /**
     * The next sequence of methods implements the following grammar:
     * <br>
     * <pre>
     *   expression -> comma ;
     *   comma      -> ternary ( "," expression )* ;
     *   ternary    -> equality ( "?" expression ":" expression )* ;
     *   equality   -> comparison ( ("!=" | "==") comparison )* ;
     *   comparison -> term ( (">" | ">=" | "<" | "<=") term )* ;
     *   term       -> factor ( ("-" | "+") factor )* ;
     *   factor     -> unary ( ("/" | "*") unary )* ;
     *   unary      -> ("!" | "-") unary | primary ;
     *   primary    -> NUMBER | STRING | "true" | "false" | "nil"
     *                 | "(" expression ")" ;
     *              // ERROR PRODUCTIONS
     *                 | ("!=" | "==") equality
     *                 | (">" | ">=" | "<" | "<=") comparison
     *                 | ("+") term
     *                 | ("/" | "*") factor ;
     * </pre>
     * @return The syntax tree generated by the method call
     */
    private Expr expression()
    {
        return comma();
    }

    /**
     * @see #expression()
     */
    private Expr comma()
    {
        // TODO: Factor in changes when parsing function arguments (at a
        //  later juncture)
        Expr expr = ternary();
        while (match(COMMA)) {
            Token operator = previous();
            Expr right = expression();
            expr = new Expr.Binary(expr, operator, right);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr ternary()
    {
        Expr expr = equality();

        if (match(QUERY)) {
            Expr branch1 = expression();
            consume(COLON, "Expect ':' after first branch of ternary operator");
            Expr branch2 = expression();
            expr = new Expr.Ternary(expr, branch1, branch2);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr equality()
    {
        Expr expr = comparison();
        while (match(BANG_EQUAL, EQUAL_EQUAL)) {
            Token operator = previous();
            Expr right = comparison();
            expr = new Expr.Binary(expr, operator, right);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr comparison()
    {
        Expr expr = term();
        while (match(GREATER, GREATER_EQUAL, LESS, LESS_EQUAL)) {
            Token operator = previous();
            Expr right = term();
            expr = new Expr.Binary(expr, operator, right);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr term()
    {
        Expr expr = factor();

        while (match(MINUS, PLUS)) {
            Token operator = previous();
            Expr right = factor();
            expr = new Expr.Binary(expr, operator, right);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr factor()
    {
        Expr expr = unary();

        while (match(SLASH, STAR)) {
            Token operator = previous();
            Expr right = unary();
            expr = new Expr.Binary(expr, operator, right);
        }
        return expr;
    }

    /**
     * @see #expression()
     */
    private Expr unary()
    {
        if (match(BANG, MINUS)) {
            Token operator = previous();
            Expr right = unary();
            return new Expr.Unary(operator, right);
        }
        return primary();
    }

    /**
     * @see #expression()
     */
    private Expr primary()
    {
        if (match(FALSE)) return new Expr.Literal(false);
        if (match(TRUE)) return new Expr.Literal(true);
        if (match(NIL)) return new Expr.Literal(null);

        if (match(NUMBER, STRING)) {
            return new Expr.Literal(previous().literal);
        }

        if (match(LEFT_PAREN)) {
            Expr expr = expression();
            consume(RIGHT_PAREN, "Expect ')' after expression.");
            return new Expr.Grouping(expr);
        }

        // ERROR PRODUCTIONS
        if (match(BANG_EQUAL, EQUAL_EQUAL)) {
            error(previous(), "Missing left-hand operand.");
            equality();
            return null;
        }

        if (match(GREATER, GREATER_EQUAL, LESS, LESS_EQUAL)) {
            error(previous(), "Missing left-hand operand.");
            comparison();
            return null;
        }

        if (match(PLUS)) {
            error(previous(), "Missing left-hand operand.");
            term();
            return null;
        }

        if (match(SLASH, STAR)) {
            error(previous(), "Missing left-hand operand.");
            factor();
            return null;
        }

        // If we get here, then we have an unknown token so report an error
        throw error(peek(), "Expect expression.");
    }

    /**
     * Private helper function which checks the current token in the stream
     * for a match against the expected types.  If it is, consume the token
     * and return true.  Otherwise, leave the token alone and return false.
     * @param types The token types we expect to see
     * @return True if the token is one of the expected types, false
     * otherwise
     */
    private boolean match(TokenType... types) {
        for (TokenType type: types) {
            if (check(type)) {
                advance();
                return true;
            }
        }
        return false;
    }

    /**
     * Checks to see if the next token is of the expected type and consumes
     * it if so.  If not, then reports the syntax error back up the call-chain
     * @param type The type of token we expect to see
     * @param message The error to report if type does not match
     * @return the next token in the sequence
     */
    private Token consume(TokenType type, String message)
    {
        if (check(type)) return advance();

        throw error(peek(), message);
    }

    /**
     * Looks at the current token (but does not consume it) to see if it
     * matches the expected token type.
     * @param type The Token type we expect to find
     * @return True if the token matches the expected type, false otherwise.
     */
    private boolean check(TokenType type)
    {
        if (isAtEnd()) return false;
        return peek().type == type;
    }

    /**
     * Consume and return the current token.
     * @return The current token
     */
    private Token advance()
    {
        if (!isAtEnd()) current++;
        return previous();
    }

    /**
     * @return true if the current token is the End of File marker, false
     * otherwise.
     */
    private boolean isAtEnd()
    {
        return peek().type == EOF;
    }

    /**
     * Looks at (and returns) the current token, but does not consume it.
     * @return The current token.
     */
    private Token peek()
    {
        return tokens.get(current);
    }

    /**
     * @return Returns the token before the current one.
     */
    private Token previous()
    {
        return tokens.get(current - 1);
    }

    /**
     * Report a parsing (syntax) error.
     * @param token The token which gave rise to the error
     * @param message The error message to report
     * @return a ParseError object used to unwind the parser to a sensible state
     */
    private ParseError error(Token token, String message)
    {
        Lox.error(token, message);
        return new ParseError();
    }

    /**
     * When an error has been detected, attempts to unwind the stack to get
     * to a known good condition so we can continue parsing.  We do this by
     * discarding tokens until we hit a statement boundary at which point we
     * resume.
     */
    private void synchronize()
    {
        advance();
        while (!isAtEnd()) {
            if (previous().type == SEMICOLON) return;

            switch (peek().type) { // Fall through is intentional
                case CLASS, FOR, FUN, IF, PRINT, RETURN, VAR, WHILE -> {
                    return;
                }
            }

            advance();
        }
    }
}
